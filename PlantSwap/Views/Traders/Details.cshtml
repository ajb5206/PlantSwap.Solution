@{
  Layout = "_Layout";
}

@model PlantSwap.Models.Trader;

<h1>@Html.DisplayFor(model => model.TraderHandle)</h1>
<hr />
<h5>@Html.DisplayNameFor(model => model.TraderHandle): @Html.DisplayFor(model => model.TraderHandle)</h5>
<h5>@Html.DisplayNameFor(model => model.TraderName): @Html.DisplayFor(model => model.TraderName)</h5>
<h5>@Html.DisplayNameFor(model => model.PreferredContact): @Html.DisplayFor(model => model.PreferredContact)</h5>
<h5>@Html.DisplayNameFor(model => model.ZipCode): @Html.DisplayFor(model => model.ZipCode)</h5>
<hr />

<h1>Offers</h1>
@if(@Model.OfferJoinEntity.Count == 0)
{
  <h5>@Html.DisplayFor(model => model.TraderHandle) has not currently made any offers.</h5>
}
else
{
  @foreach(var join in Model.OfferJoinEntity)
  {
    <h5>Offering: @Html.ActionLink($"{@join.Plant.CommonName}", "Details", "Plants", new { id = @join.Plant.PlantId })</h5>

    if(@join.IsCutting == true)
    {
      <p>This offer is a cutting</p>
    }
    
    <p>Will except in exchange: @Html.ActionLink($"{@join.WillAcceptPlantCommonName}", "Details", "Plants", new { id = @join.WillAcceptPlantId })</p>

    if(@join.ImperfectMatch == true)
    {
      <p>@join.Trader.TraderHandle *will* consider other plants in exchange for their @join.Plant.CommonName</p>
    }

    <p>Listing date: @join.ListingDate</p>
    <p>Maximum distance: @join.MaxDistance miles from zip code @Model.ZipCode</p>
    @using (Html.BeginForm("DeleteOffer", "Traders"))
    {
      @Html.Hidden("joinId", @join.OfferId)
      <input type="submit" class="button" value="Delete"/>
    }
  }
}
<hr />

<h1>Requests</h1>
@if(@Model.RequestJoinEntity.Count == 0)
{
  <h5>@Html.DisplayFor(model => model.TraderHandle) has not made any requests.</h5>
}
else
{
  @foreach(var join in Model.RequestJoinEntity)
  {
    <h5>Requested: @Html.ActionLink($"{@join.Plant.CommonName}", "Details", "Plants", new { id = @join.Plant.PlantId })</h5>
    <p>In exchange for: @Html.ActionLink($"{@join.HaveToOfferPlantCommonName}", "Details", "Plants", new { id = @join.HaveToOfferPlantId })</p>
    <p>Listing date: @join.ListingDate</p>
    <p>Maximum distance in miles for trading: @join.MaxDistance</p>
    
    @using (Html.BeginForm("DeleteRequest", "Traders"))
    {
      @Html.Hidden("joinId", @join.RequestId)
      <input type="submit" class="button" value="Delete"/>
    }
  }
}

<hr />
<p>@Html.ActionLink("Add an Offer", "AddOffer", new { id = Model.TraderId })</p>
<p>@Html.ActionLink("Add a Request", "AddRequest", new { id = Model.TraderId })</p>
<p>@Html.ActionLink("Edit Trader", "Edit", new { id = Model.TraderId })</p>
<p>@Html.ActionLink("Delete Trader", "Delete", new { id = Model.TraderId })</p>